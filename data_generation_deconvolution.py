"""
Script to create the data draws from the GMM in section 4.

NOTE: To exactly reproduce the results from the paper, please use the data
./data/simulation_data_original.npy. Those data were generated using the code
below, so if the code below is used, the downstream results should still be
very close.

NOTE: The data could alternatively be generated by explicitly using a poisson
number random generator, but we have written it as below to more clearly
show the relationship between the intensity function and the data.

Author        : Michael Stanley
Created       : 05 Nov 2021
Last Modified : 05 Nov 2021
===============================================================================
"""
import json
import numpy as np
from scipy import stats
from tqdm import tqdm

def sample_gmm(pi, mu, sigma, T):
    """
    Sample points from the gaussian mixture model

    Parameters:
    -----------
        pi    (np arr) : probability of each element
        mu    (np arr) : mean of distribution
        sigma (np arr) : standard deviations of each distribution

    Returns:
    --------
        sampled_data (np arr) : sampled data
    """
    # sample the number of data points
    tau = stats.poisson(mu=T).rvs()

    # select mixture components
    mix_comps = stats.bernoulli.rvs(p=pi[1], size=tau)

    # generate normal data
    comp0_samp = stats.norm(loc=mu[0], scale=sigma[0]).rvs(tau)
    comp1_samp = stats.norm(loc=mu[1], scale=sigma[1]).rvs(tau)

    # generate data
    sampled_data = np.zeros(tau)
    for i in range(tau):
        if mix_comps[i] == 1:
            sampled_data[i] = comp1_samp[i]
        else:
            sampled_data[i] = comp0_samp[i]

    return sampled_data


def generate_hists(
    pi,
    mu,
    sigma,
    T,
    sigma_smear,
    bin_lb,
    bin_ub,
    num_bins_true,
    num_bins_smear
):
    """
    Generate one realization of histogram data

    Parameters:
    -----------
        pi             (np arr) : GMM mixture probs
        mu             (np arr) : GMM means
        sigma          (np arr) : GMM standard deviations
        T              (int)    : mean of poisson proc on full space
        sigma_smear    (float)  : convolution noise
        bin_lb         (float)  : lower bound of histogram support
        bin_ub         (float)  : upper bound of histogram support
        num_bins_true  (np arr) : # of bins to use for the true hist.
        num_bins_smear (np arr) : # of bins to use for the smeared hist.

    Returns:
    --------
        tuple of histogram output (bin counts, bin edges)
        - true histogram
        - smeared histogram
    """
    mix_data = sample_gmm(pi=pi, mu=mu, sigma=sigma, T=T)
    smearing_noise = stats.norm(loc=0, scale=sigma_smear).rvs(len(mix_data))
    smeared_mix_data = mix_data + smearing_noise

    # generate the histogram data
    hist_true = []
    hist_smear = []

    for num_bin in num_bins_true:

        hist_true_i = np.histogram(
            a=mix_data,
            bins=np.linspace(bin_lb, bin_ub, num=(num_bin + 1))
        )
        hist_true.append(hist_true_i)

    for num_bin in num_bins_smear:
        hist_smear_i = np.histogram(
            a=smeared_mix_data,
            bins=np.linspace(bin_lb, bin_ub, num=(num_bin + 1))
        )
        hist_smear.append(hist_smear_i)

    return hist_true, hist_smear

if __name__ == "__main__":

    # operational parameters
    NUM_DATA_GEN = 10000

    # read in parameter values
    with open('./simulation_model_parameters.json') as f:
        parameters = json.load(f)

    pi = parameters['gmm_truth']['pi']
    mu = parameters['gmm_truth']['mu']
    sigma = parameters['gmm_truth']['sigma']
    T = parameters['gmm_truth']['T']
    sigma_smear = parameters['smear_strength']

    bin_lb = parameters['wide_bin_deconvolution_bins']['bin_lb']
    bin_ub = parameters['wide_bin_deconvolution_bins']['bin_ub']

    # generate the data
    data = np.zeros(shape=(NUM_DATA_GEN, 40))

    for i in tqdm(range(NUM_DATA_GEN)):
        
        # generate some data
        np.random.seed(i)
        hist_true_i, hist_smear_i = generate_hists(
            pi=pi,
            mu=mu,
            sigma=sigma,
            T=T,
            sigma_smear=sigma_smear,
            bin_lb=bin_lb,
            bin_ub=bin_ub,
            num_bins_true=[40],
            num_bins_smear=[40]
        )
        
        # save that data
        data[i, :] = hist_smear_i[0][0]

    # save
    np.save(file='./data/simulation_data.npy', arr=data)